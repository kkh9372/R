View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
#날짜 : 2021/09/30
#이름 : 김관후
#내용 : 고급 시각화분석 - ggplot2 패키지 시각화 도구  교재 p259
install.packages('ggplot2')
library(ggplot2)
# 막대차트
mtcars
mtcars_cy1 <- table(mtcars$cyl)
mtcars_cy1
# R 기본 막대차트
barplot(mtcars_cy1)
#ggplot2 막대차트
qplot(data=mtcars, x=cyl, geom='bar')
ggplot(data = mtcars, aes(x=cyl)) + geom_bar()
# 라인차트
economics
View(economics)
# R기본 기본차트
plot(economics$date, economics$unemploy, type= 'l')
#ggplot2 라인차트
qplot(data = economics, x=date, y=unemploy, geom = 'line')
ggplot(data = economics, aes(x=date, y=unemploy)) + geom_line()
# 박스상자
mpg
View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
mpg
View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
View(df_result1)
View(df_result2)
View(df_result1)
library(ggplot2)
############
# 박스상자
mpg
View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
qplot(data = mpg, x=drv, y=hwy, geom='boxplot')
ggplot()
#ggplot2 박스상자
qplot(data = mpg, x=drv, y=hwy, geom='boxplot')
ggplot()
#ggplot2 박스상자
qplot(data = mpg, x=drv, y=hwy, geom='boxplot')
qplot
############
# 히스토그램
iris
View(iris)
hist(iris$Sepal.Length)
hist(iris$Petal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Length)
#ggplot2 히스토그램
gplot()
ggplot()
ggplot() + geom_histogram()
ggplot() + geom_histogram()
#ggplot2 히스토그램
ggplot()
ggplot() + geom_histogram()
#ggplot2 히스토그램
gplot()
ggplot() + geom_histogram()
#ggplot2 히스토그램
ggplot()
ggplot() + geom_histogram()
#ggplot2 히스토그램
gplot(data = iris, x=iris$Sepal.Width, geom='histogram')
#ggplot2 히스토그램
qplot(data = iris, x=iris$Sepal.Width, geom='histogram')
ggplot(data= iris, aes(X=Sepal.Width)) + geom_histogram()
plot(iris[,3:4], pch=16, col=iris$Species)
ggplot(data = iris, aes(x=Petal.Length,
y=Peata.Width,
color=Species))+ geom_point()
#ggplot2 산점도
qplot(data= iris, x=Petal.Length,
y=Peata.Width,
color=Species,
geom='point')
#ggplot2 산점도
qplot(data= iris, x=Petal.Length,
y=Peata.Width,
color=Species,
geom='point')
#ggplot2 산점도
qplot(data = iris,
x=Petal.Length,
y=Petal.Width,
color=Species,
geom = 'point')
ggplot(data = iris, aes(x=Petal.Length, y=Petal.Width, color=Species))+geom_point()
install.packages('lattice')
library('lattice')
install.packages('RMySQL')
library('RMySQL')
library(RMySQL)
library(dplyr)
library(ggplot2)
# 쿼리실행
user <- dbGetQuery(conn, statement = 'SELECT * FROM `USER1`')
user
user <- dbGetQuery(conn, statement = 'SELECT * FROM `USER1`')
user
# 쿼리실행
df_user <- dbGetQuery(conn, statement = 'SELECT * FROM `USER1`')
Encoding(df_user$name) <- 'UTF-8'
df_user
df_user <- dbGetQuery(conn, statement = 'SELECT * FROM `user1`')
Encoding(df_user$name) <- 'UTF-8'
df_user
df_user <- dbGetQuery(conn, statement = 'SELECT * FROM `user1`')
Encoding(df_user$name) <- 'UTF-8'
df_user
conn <- dbConnect(MySQL(),
host='54.180.160.240',
user='kkh9372',
password='1234',
dbname='kkh9372')
df_user <- dbGetQuery(conn, statement = 'SELECT * FROM `user1`')
Encoding(df_user$name) <- 'UTF-8'
df_user
#매출 데이터 불러오기
dbGetQuery(conn, statement = 'SELECT * FROM `SALE`')
View(df_sale)
#매출 데이터 불러오기
df_sale <- dbGetQuery(conn, statement = 'SELECT * FROM `SALE`')
View(df_sale)
#직원별 매출 현황
df_result <- df_sale %>% group_by(uid) %>% summarise(total = sum(sales)) %>%  arrange(desc(total))
View(df_result)
#시각화
ggplot(data = df_result, aes(x=uid, y=total)) + geom_col()
#데이터베이스 종료
dbDisconnect(conn)
install.packages('https://cran.seoul.go.kr/bin/windows/contrib/3.4/KoNLP_0.80.1.zip')
install.packages('https://cran.seoul.go.kr/bin/windows/contrib/3.4/KoNLP_0.80.1.zip', repos =  NULL)
library(KoNLP)
library(KoNLP)
ages
install.packages('https://cran.seoul.go.kr/bin/windows/contrib/3.4/KoNLP_0.80.1.zip', repos =  NULL)
library(KoNLP)
library(KoNLP)
install.packages('https://cran.seoul.go.kr/bin/windows/contrib/3.4/KoNLP_0.80.1.zip', repos =  NULL)
library(KoNLP)
install.packages('SeJong')
y
install.packages('SeJong')
install.packages('hash')
install.packages('Sejong')
install.packages('hash')
install.packages('rJava')
library(KoNLP)
install.packages('tau')
library(KoNLP)
library(KoNLP)
install.packages('RSQLite')
library(KoNLP)
install.packages('devtools')
library(KoNLP)
library(KoNLP)
library(KoNLP)
library(dplyr)
library(dplyr)
install.packages('stringr')
install.packages('wordcloud')
library(dplyr)
library(stringr)
library(wordcloud)
install.packages('dplyr')
library(dplyr)
txt_data <- readLines('../file/wordcloud.txt', encoding = 'UTF-8')
txt_data
#텍스트 데이터 불러오기
txt_data <- readLines('../file/wordcloud.txt', encoding = 'UTF-8')
#텍스트 데이터 불러오기
txt_data <- readLines('../file/wordcloud_data.txt', encoding = 'UTF-8')
txt_data
# 명사 추출
txt_noun <- extractNoun(txt_data)
library(Sejong)
# 명사 추출
txt_noun <- extractNoun(txt_data)
install.packages('extractNoun')
install.packages('KoNLP')
install.packages('Sejong')
install.packages('hash')
install.packages('rJava')
install.packages('tau')
install.packages('RSQLite')
install.packages('devtools')
install.packages('stringr')
install.packages('wordcloud')
install.packages('dplyr')
install.packages('extractNoun')
exam_df <- read.csv(file = '../file/student.txt')
exam_df <- read.csv(file = '../file/exam.csv')
exam_df
install.packages('dplyr')
library(dplyr)
df_exam <- read.csv(file = '../file/exam.csv')
df_exam
df_result1 <- df_exam %>% select(math, english, science)
df_result1
df_result1 <- df_exam %>% select(math, english, science)
df_exam <- read.csv(file = '../file/exam.csv')
df_exam
df_result1 <- df_exam %>% select(math, english, science)
library(dplyr)
df_result2
df_result1 <- df_exam %>% select(math, english, science)
df_result1
install.packages('dplyr')
library(dplyr)
library(dplyr)
df_exam <- read.csv(file = '../file/exam.csv')
df_exam
df_result1 <- df_exam %>% select(math, english, science)
df_result1
install.packages('dplyr')
library(dplyr)
df_exam <- read.csv(file = '../file/exam.csv')
df_exam
df_result1 <- df_exam %>% select(math, english, science)
df_result1
df_exam
df_result2 <- df_exam %>% filter(class == 1)
df_result2
df_result2 <- df_exam %>% filter(class == 1) %>% select(math)
df_result2
df_result2 <- df_exam %>% filter(class == 1) %>% select(everything())
df_result2
df_result3 <- df_exam %>%  select(everything()) %>%  filter(english >= 60 & english < 80)
df_result3
df_result3 <- df_exam %>% filter(english >= 60 & english < 80)
df_result3
df_result4 <- df_exam %>% filter(science >= 60 | science <= 80)
df_result4
df_result4 <- df_exam %>% filter(science >= 60 | science < 80)
df_result4
df_result4 <- df_exam %>% filter(science >= 60 & science < 80)
df_result4
df_result5 <- df_exam %>% filter(math >= 60 ) %>% select(class, id ,math)  %>% arrange(desc(math))
df_result5
%>% arrange(desc(math))
df_result5 <- df_exam %>% filter(math >= 60 )
%>% select(class, id ,math)
%>% arrange(desc(math))
df_result5
df_result6 <- df_exam %>%  group_by(class) %>% summarise(mean(math),mean(english),mean(science))
df_result6
df_result6
df_result7 <- df_exam %>% mutate(total = math+english+science)
df_result7
df_result8 <- df_exam %>% mutate(mean = total/3)
df_result8 <- df_result7 %>% mutate(mean = total/3)
df_result8
df_result9 <- df_result8 %>% mutate(grade = ifelse(mean >= 90, 'A',
ifelse(mean >= 80, 'B',
ifelse(mean >= 70, 'C',
ifelse(mean >= 60, 'D', 'F')))))
df_result9
install.packages("log4r")
install.packages("DBI")
install.packages("rJava")
install.packages("RJDBC")
install.packages("log4r")
install.packages("DBI")
install.packages("rJava")
install.packages("RJDBC")
install.packages("log4r")
library("DBI")
library("rJava")
library("RJDBC")
hive.class.path = list.files(path=c("../lib"), pattern="jar",full.names=T);
hadoop.lib.path = list.files(path=c("../lib"), pattern="jar",full.names=T);
hadoop.class.path = list.files(path=c("../lib"), pattern="jar",full.names=T);
class.path = c(hive.class.path,hadoop.lib.path,hadoop.class.path);
.jinit(classpath = class.path)
drv <- JDBC("org.apache.hive.jdbc.HiveDriver",
"../lib/hive-jdbc-2.1.1-cdh6.3.2.jar",
identifier.quote = "`")
conn <- dbConnect(drv,
"jdbc:hive2://192.168.100.201:10000/default",
"hive",
"1234")
dbListTables(conn);
data <- dbGetQuery(conn, "select * from smartcar_master2income")
View(data)
model1 <- lm(data$smartcar_master2income.income ~ data$smartcar_master2income.car_capacity,data=data)
summary(model)
test_data <- read.csv('../file/CarMaster2Income_Test.txt',
sep='|',
header=T,
encoding='UTF-8')
predict()
#2)유의수준 설정
a = 0.05
#3)통계량 계산
z = (244.65 - 300) / 20 * sqrt(300)
z
p = 1 - pnorm(ㅋ)
p = 1 - pnorm(z)
p
x <- c(35, 32, 33, 28, 29, 30, 31, 29, 28, 30)
mean(x)
#2) 유의수준 설정
a = 0.05
#3) 통계량 계산
z = (mean(x)-30) / 5 * sqrt(10)
z
p = (1 - pnorm(z)) * 2
p
pnorm(z)
# pnorm 함수의 예시
r1 <- pnorm(1.65) - pnorm(-1.65)
r2 <- pnorm(1.96) - pnorm(-1.96)
r3 <- pnorm(2.58) - pnorm(-2.58)
r1
r2
r3
pnorm(z)
pnorm(z)
p = (1 - pnorm(z)) * 2 # 제품이 평균 30kg이 될 수 있는 확률
p
install.packages('corrplot')
library(corrplot)
data(iris)
df_iris <- iris
View(df_iris)
cor(df_iris$Sepal.Length, df_iris$Sepal.Width)
cor(df_iris$Sepal.Length, df_iris$Petal.Length)
cor(df_iris$Petal.Length, df_iris$Petal.Width)
corr_iris <- cor(df_iris[,1:4], method = 'pearson')
corr_iris
corrplot(corr_iris)
corrplot(corr_iris, type="lower")
corrplot(corr_iris, method="number")
df_product <- read.csv('../file/product.csv')
df_product
#시각화
corrplot(corr_product)
df_product
# 상관계수 확인
cor(dfproduct$제품친밀도, dfproduct$제품적절성)
cor(dfproduct$제품친밀도, dfproduct$제품만족도)
cor(dfproduct$제품친밀도, dfproduct$제품적절성)
#상관행렬 확인
cor(df_product, method = 'pearson')
#시각화
corrplot(corr_product)
View(df_product)
setwd("C:/Users/bigdata/Desktop/workspace/R/file")
df_product <- read.csv('../file/product.csv')
View(df_product)
df_xt <- data.frame()
df_xy <- data.frame()
df_xy <- data.frame(df_product$제품_적절성, df_product$제품_만족도)
View(df_xy)
#선형회귀 모델
model <- lm(formula = y ~ x, data = df_xy)
x <- df_xy$df_product.제품_적절성
y <- df_xy$df_product.제품_만족도
#선형회귀 모델
model <- lm(formula = y ~ x, data = df_xy)
model
result <- function(x) {
y <- 0.7393 * x + 0.7789
return(y)
}
# 테스트
result(1)
result(2)
result(3)
result(4)
result(5)
# 다중선형회귀
x1 <- df_product$제품_친밀도
x2 <- df_product$제품_적절성
y <- df_product$제품_만족도
# 다중선형회귀
x1 <- df_product$제품_친밀도
x2 <- df_product$제품_적절성
y <- df_product$제품_만족도
# 모델생성
model < - lm(formula = y ~ x1 + x2, data =df_product)
# 다중선형회귀
x1 <- df_product$제품_친밀도
x2 <- df_product$제품_적절성
y <- df_product$제품_만족도
# 모델생성
model <- lm(formula = y ~ x1 + x2, data =df_product)
model
# galton 선형회귀 분석
install.packages('UsingR')
library(UsingR)
View(galton)
galton_model <- lm(child ~ parent, data = galton)
galton_model
plot(galtonchild ~ galton$parent, data = galton)
galton_model <- lm(child ~ parent, data = galton)
galton_model
plot(galtonchild ~ galton$parent, data = galton)
plot(galton$child ~ galton$parent, data = galton)
plot(galton$child ~ galton$parent, data = galton)
abline(galton_model, col='red')
# 데이터 준비하기
View(iris)
df_iris <- iris
df_iris$Species <- as.integer(df_iris$Species)
View(df_iris)
#학습데이터
idx <- sample(1:nrow(df_iris), nrow(df_iris) * 0.8)
idx
train_iris <- df_iris[idx,]
test_iris <- df_iris[-idx,]
View(test_iris)
View(train_iris)
# 모델생성 % 학습하기
model <- glm(Species ~ ., data = train_iris)
fitted(model)
# 테스트하기
result <- predict(model, test_iris)
result
result <- round(result, 0)
result
#성능평가
acc <- mean(result == test_iris)
#성능평가
acc <- mean(result == test_iris$Species)
acc
#2)유의수준 설정
a = 0.05
#3)통계량 계산
z = (294.65 - 300) / 20 * sqrt(300)
z
p = 1 - pnorm(z)
p
#2)유의수준 설정
a = 0.05
#3)통계량 계산, z값, p값
z = (244.65 - 300) / 20 * sqrt(300)
z
p = 1 - pnorm(z)
p
#2)유의수준 설정
a = 0.05
#3)통계량 계산
z = (294.65 - 300) / 20 * sqrt(300)
z
p = 1 - pnorm(z)
p
# 패키지 설치
install.packages('party')
library(party)
library(party)
# 데이터 준비하기
df_iris <- iris
View(df_iris)
#학습, 테스트 데이터
idx <- sample(1:nrow(df_iris), nrow(df_iris) * 0.8)
idx
train_iris <- df_iris[idx,]
test_iris <- df_iris[-idx,]
View(train_iris)
View(test_iris)
# 결정트리 모델생성
model <- ctree(formula = Species ~ ., data=train_iris)
# 시각화
plot(model)
# 테스트하기
result <- predict(model, test_iris)
result
#성능평가
acc <- mean(result == test_iris$Species)
acc
#2)유의수준 설정
a = 0.05
#3)통계량 계산, z값, p값
z = (244.65 - 300) / 45 * sqrt(300)
z
p = 1 - pnorm(z)
p
#2)유의수준 설정
a = 0.05
#3)통계량 계산, z값, p값
z = (244.65 - 300) / 20 * sqrt(300)
z
p = 1 - pnorm(z)
p
#2)유의수준 설정
a = 0.05
#3)통계량 계산, z값, p값
z = (294.65 - 300) / 45 * sqrt(300)
z
p = 1 - pnorm(z)
p
#2)유의수준 설정
a = 0.05
#3)통계량 계산, z값, p값
z = (294.65 - 300) / 45 * sqrt(300)
z
p = 1 - pnorm(z)
p
