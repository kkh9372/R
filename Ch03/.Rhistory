subject = c("컴퓨터", "국어국문", "소프트웨어", "유아교육")
student <- data.frame(sid, score, subject)
student
#교재 p76 실습 - 자료형과 자료구조 보기
mode(student); class(student)
str(sid); str(score); str(subject)
str(student)
height <- data.frame(id = c(1,2), h = c(180, 175))
weight <- data.frame(id = c(1,2), w = c(80, 75))
user <- merge(height, weight, by.x = "id", by.y = "id")
user
#교재 p77 실습 - galton 데이터셋 가져오기
installed.packages("UsingR")
#교재 p77 실습 - galton 데이터셋 가져오기
install.packages("UsingR")
library(UsingR)
data(galton)
#교재 p77 실습 - galton 데이터셋 구조 보기
str(galton)
dim(galton)
head(galton, 15)
install.packages('dplyr')
library(dplyr)
df_exam <- read.csv('../file/exam.csv')
df_exam
df_math <- df_exam %>% select(math)
df_math
df_rs <- df_exam[,3]
df_rs
df_math <- df_exam %>% select(math)
df_english <- df_exam %>% select(english)
df_result1 <- df_exam %>% select(english, science)
df_result2 <- df_exam %>% select(everything())
df_result2
df_class1 <- df_exam %>% select(everything()) %>% filter(class== 1)
df_class1
# - 영어점수 60점 이상 그리고 80점 미만
df_exam %>%  select(english) where >= 60
# - 영어점수 60점 이상 그리고 80점 미만
df_exam %>%  select(everything()) %>%  filter(english >= 60 & english < 80)
df_rs1 <- df_exam %>%  select(everything()) %>%  filter(english >= 60 & english < 80)
df_rs1
df_rs2 -> df_exam %>% filter(science >= 60 | science <= 80)
Vieww(df_rs2)
df_rs2 <- df_exam %>% filter(science >= 60 | science <= 80)
Vieww(df_rs2)
df_rs2 <- df_exam %>% filter(science >= 60 | science <= 80)
View(df_rs2)
df_rs3 <- df_exam %>% select(math) %>% filter(class == 1)
View(df_rs3)
df_rs3 <- df_exam %>% filter(class == 1) %>% select(math)
View(df_rs3)
View(df_math_desc)
df_math_asc <- df_exam %>% arrange(math)
df_math_desc <- df_exam %>% arrange(desc(math))
View(df_math_asc)
View(df_math_desc)
View(df_total)
df_total <- df_exam %>% mutate(total == math+english+science)
View(df_total)
View(df_exam)
#mutate - DataFrame의 파생변수(새로운 컬럼)를 생성
df_total <- df_exam %>% mutate(total == math+english+science)
View(df_exam)
df_total <- df_exam %>% mutate(total = math+english+science)
View(df_exam)
df_total <- df_exam %>% mutate(total = math+english+science)
View(df_exam)
df_mean <- df_total %>% mutate(mean = total/3)
View(df_exam)
View(df_exam)
df_mean <- df_total %>% mutate(mean = total/3)
df_total <- df_exam %>% mutate(total = math+english+science)
df_mean <- df_total %>% mutate(mean = total/3)
View(df_exam)
df_total <- df_exam %>% mutate(total = math+english+science)
df_mean <- df_total %>% mutate(mean = total / 3)
df_total <- df_exam %>% mutate(total = math+english+science)
df_mean <- df_total %>% mutate(mean = total / 3)
df_grade df_mean %>%  mutate(grade = ifelse(mean >= 90, 'A',
ifelse(mean >= 80, 'B',
ifelse(mean >= 70, 'C',
ifelse(mean >= 60, 'D','F')))))
View(df_exam)
df_total <- df_exam %>% mutate(total = math+english+science)
df_mean <- df_total %>% mutate(mean = total / 3)
df_grade <- df_mean %>%  mutate(grade = ifelse(mean >= 90, 'A',
ifelse(mean >= 80, 'B',
ifelse(mean >= 70, 'C',
ifelse(mean >= 60, 'D','F')))))
View(df_exam)
df_total <- df_exam %>% mutate(total = math+english+science)
df_mean <- df_total %>% mutate(mean = total / 3)
df_grade <- df_mean %>%  mutate(grade = ifelse(mean >= 90, 'A',
ifelse(mean >= 80, 'B',
ifelse(mean >= 70, 'C',
ifelse(mean >= 60, 'D','F')))))
View(df_grade)
#summarise - DataFrame의 요약통계
df_exam %>% summarise(mean_math = mean(math))
#summarise - DataFrame의 요약통계
df_exam %>% summarise(mean_math = mean(math))
df_exam %>% summarise(sum_math = sum(math))
#group_by
df_exam %>% group_by(class) %>% summarise(sum(math))
View(df_group2)
df_group1 <- df_exam %>% group_by(class) %>% summarise(sum(math))
df_group2 <- df_exam %>% group_by(class) %>% summarise(mean(math))
View(df_group2)
df_teacher <- data.frame(class = c(1,2,3,4,5),
name = c('김유신', '김춘추', '장보고', '강감찬', '이순신'))
df_teacher
df_join <- inner_join(df_exam, df_teacher, by='class')
View(df_join)
install.packages('reshape2')
library(reshape2)
df_student <- read.csv('../file/student4.txt')
View(df_student)
melt_result1 <- melt(df_student, id.vars = '번호')
View(melt_result1)
melt_result2 <- melt(df_student, id.vars = '번호', measure.vars = '이름')
View(melt_result2)
dcast_result <- dcast(melt_result1, 번호 ~ valiable)
View(dcast_result)
dcast_result <- dcast(melt_result1, 번호 ~ variable)
View(dcast_result)
df_exam <- read.csv('../file/exam.csv')
#view
View(df_exam)
# head(), tail()
head(df_exam)
tail(df_exam)
#dim()
dim(df_exam)
#str()
str(df_exam)
#summart()
summary(df_exam)
#sum()
sum(df_exam$math)
#mean()
mean(df_exam$english)
df_exam <- read.csv('../file/exam_ns.csv')
df_exam <- read.csv('../file/exam_na.csv')
View(df_exam)
# 결측치 존재여부 확인
is.na(df_exam)
is.na(df_exam)
# 결측치를 갖는 행 제거
df_exam %>% filter(!is.na(math) & !is.na(english) & !is.na(science))
df_exam_new <- df_exam %>% filter(!is.na(math) & !is.na(english) & !is.na(science))
View(df_exam_new)
df_exam_new %>% mutate(total = math+english+science, mean=total/3) %>%
arrange(desc(total))
df_exam <- read.csv('../file/exam_outlier.csv')
(df_exam)
df_exam <- read.csv('../file/exam_outlier.csv')
View(df_exam)
df_exam$math <- ifelse(df_exam$math > 100 | df_exam$math < 0, NA, df_exam$math)
df_exam$english <- ifelse(df_exam$english > 100 | df_exam$english < 0, NA, df_exam$english)
df_exam$science <- ifelse(df_exam$science > 100 | df_exam$science < 0, NA, df_exam$science)
# 결측치를 0으로 수정
df_exam[is.na(df_exam)]
# 결측치를 0으로 수정
df_exam[is.na(df_exam)] <- 0
# 결측치를 0으로 수정
df_exam[is.na(df_exam)] <- 0
View(df_exam)
# 기초 통계분석
df_exam %>%  mutate(total=math+english+science, mean=total/3) %>%  arrange(desc(total))
df_exam <- read.csv('../file/exam.csv')
View(df_exam)
f_exam$total <- df_exam$math + df_exam$english + df_exam$science
View(df_exam)
df_exam$meam <- df_exam$total / 3
View(df_exam)
df_exam$grade <- ifelse(df_exam$mean >= 90, 'A',
ifelse(df_exam$mean >= 80, 'B',
ifelse(df_exam$mean >= 70, 'C',
ifelse(df_exam$mean >= 60, 'D', 'F'))))
View(df_exam)
install.packages('ggplot2')
library(ggplot2)
# 막대차트
mtcars
mtcars_cy1 <- table(mtcars$cyl)
mtcars_cy1
# R 기본 막대차트
barplot(mtcars_cy1)
#ggplot2 막대차트
qplot(data=mtcars, x=cyl, geom='bar')
ggplot(dat = mtcars, aes(x=cyl)) %>% + geom_bar()
ggplot(dat = mtcars, aes(x=cyl)) %>% + geom_bar()
ggplot(data = mtcars, aes(x=cyl)) %>% + geom_bar()
ggplot(data = mtcars, aes(x=cyl)) + geom_bar()
# 라인차트
economics
View(economics)
# R기본 기본차트
plot(economics$date, economics$unemploy)
# R기본 기본차트
plot(economics$date, economics$unemploy, type= '1')
# R기본 기본차트
plot(economics$date, economics$unemploy, type= '1')
# R기본 기본차트
plot(economics$date, economics$unemploy, type= '1')
# R기본 기본차트
plot(economics$date, economics$unemploy, type= 'l')
#ggplot2 라인차트
qplot(data = economics, x=data, y=unemploy, geom = 'line')
#ggplot2 라인차트
qplot(data = economics, x=date, y=unemploy, geom = 'line')
# 박스상자
mpg
View(mpg)
View(mpg)
mpg
View(mpg)
mpg
View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
# 박스상자
mpg
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
boxplot(mpg$hwy ~ mpg$drv)
View(mpg)
library(ggplot2)
# 박스상자
mpg
View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
# 박스상자
mpg
View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
#날짜 : 2021/09/30
#이름 : 김관후
#내용 : 고급 시각화분석 - ggplot2 패키지 시각화 도구  교재 p259
install.packages('ggplot2')
library(ggplot2)
# 막대차트
mtcars
mtcars_cy1 <- table(mtcars$cyl)
mtcars_cy1
# R 기본 막대차트
barplot(mtcars_cy1)
#ggplot2 막대차트
qplot(data=mtcars, x=cyl, geom='bar')
ggplot(data = mtcars, aes(x=cyl)) + geom_bar()
# 라인차트
economics
View(economics)
# R기본 기본차트
plot(economics$date, economics$unemploy, type= 'l')
#ggplot2 라인차트
qplot(data = economics, x=date, y=unemploy, geom = 'line')
ggplot(data = economics, aes(x=date, y=unemploy)) + geom_line()
# 박스상자
mpg
View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
mpg
View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
View(df_result1)
View(df_result2)
View(df_result1)
library(ggplot2)
############
# 박스상자
mpg
View(mpg)
#R 기본 박스상자
boxplot(mpg$hwy ~ mpg$drv)
qplot(data = mpg, x=drv, y=hwy, geom='boxplot')
ggplot()
#ggplot2 박스상자
qplot(data = mpg, x=drv, y=hwy, geom='boxplot')
ggplot()
#ggplot2 박스상자
qplot(data = mpg, x=drv, y=hwy, geom='boxplot')
qplot
############
# 히스토그램
iris
View(iris)
hist(iris$Sepal.Length)
hist(iris$Petal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Length)
#ggplot2 히스토그램
gplot()
ggplot()
ggplot() + geom_histogram()
ggplot() + geom_histogram()
#ggplot2 히스토그램
ggplot()
ggplot() + geom_histogram()
#ggplot2 히스토그램
gplot()
ggplot() + geom_histogram()
#ggplot2 히스토그램
ggplot()
ggplot() + geom_histogram()
#ggplot2 히스토그램
gplot(data = iris, x=iris$Sepal.Width, geom='histogram')
#ggplot2 히스토그램
qplot(data = iris, x=iris$Sepal.Width, geom='histogram')
ggplot(data= iris, aes(X=Sepal.Width)) + geom_histogram()
plot(iris[,3:4], pch=16, col=iris$Species)
ggplot(data = iris, aes(x=Petal.Length,
y=Peata.Width,
color=Species))+ geom_point()
#ggplot2 산점도
qplot(data= iris, x=Petal.Length,
y=Peata.Width,
color=Species,
geom='point')
#ggplot2 산점도
qplot(data= iris, x=Petal.Length,
y=Peata.Width,
color=Species,
geom='point')
#ggplot2 산점도
qplot(data = iris,
x=Petal.Length,
y=Petal.Width,
color=Species,
geom = 'point')
ggplot(data = iris, aes(x=Petal.Length, y=Petal.Width, color=Species))+geom_point()
install.packages('lattice')
library('lattice')
install.packages('RMySQL')
library('RMySQL')
library(RMySQL)
library(dplyr)
library(ggplot2)
# 쿼리실행
user <- dbGetQuery(conn, statement = 'SELECT * FROM `USER1`')
user
user <- dbGetQuery(conn, statement = 'SELECT * FROM `USER1`')
user
# 쿼리실행
df_user <- dbGetQuery(conn, statement = 'SELECT * FROM `USER1`')
Encoding(df_user$name) <- 'UTF-8'
df_user
df_user <- dbGetQuery(conn, statement = 'SELECT * FROM `user1`')
Encoding(df_user$name) <- 'UTF-8'
df_user
df_user <- dbGetQuery(conn, statement = 'SELECT * FROM `user1`')
Encoding(df_user$name) <- 'UTF-8'
df_user
conn <- dbConnect(MySQL(),
host='54.180.160.240',
user='kkh9372',
password='1234',
dbname='kkh9372')
df_user <- dbGetQuery(conn, statement = 'SELECT * FROM `user1`')
Encoding(df_user$name) <- 'UTF-8'
df_user
#매출 데이터 불러오기
dbGetQuery(conn, statement = 'SELECT * FROM `SALE`')
View(df_sale)
#매출 데이터 불러오기
df_sale <- dbGetQuery(conn, statement = 'SELECT * FROM `SALE`')
View(df_sale)
#직원별 매출 현황
df_result <- df_sale %>% group_by(uid) %>% summarise(total = sum(sales)) %>%  arrange(desc(total))
View(df_result)
#시각화
ggplot(data = df_result, aes(x=uid, y=total)) + geom_col()
#데이터베이스 종료
dbDisconnect(conn)
install.packages('https://cran.seoul.go.kr/bin/windows/contrib/3.4/KoNLP_0.80.1.zip')
install.packages('https://cran.seoul.go.kr/bin/windows/contrib/3.4/KoNLP_0.80.1.zip', repos =  NULL)
library(KoNLP)
library(KoNLP)
ages
install.packages('https://cran.seoul.go.kr/bin/windows/contrib/3.4/KoNLP_0.80.1.zip', repos =  NULL)
library(KoNLP)
library(KoNLP)
install.packages('https://cran.seoul.go.kr/bin/windows/contrib/3.4/KoNLP_0.80.1.zip', repos =  NULL)
library(KoNLP)
install.packages('SeJong')
y
install.packages('SeJong')
install.packages('hash')
install.packages('Sejong')
install.packages('hash')
install.packages('rJava')
library(KoNLP)
install.packages('tau')
library(KoNLP)
library(KoNLP)
install.packages('RSQLite')
library(KoNLP)
install.packages('devtools')
library(KoNLP)
library(KoNLP)
library(KoNLP)
library(dplyr)
library(dplyr)
install.packages('stringr')
install.packages('wordcloud')
library(dplyr)
library(stringr)
library(wordcloud)
install.packages('dplyr')
library(dplyr)
txt_data <- readLines('../file/wordcloud.txt', encoding = 'UTF-8')
txt_data
#텍스트 데이터 불러오기
txt_data <- readLines('../file/wordcloud.txt', encoding = 'UTF-8')
#텍스트 데이터 불러오기
txt_data <- readLines('../file/wordcloud_data.txt', encoding = 'UTF-8')
txt_data
# 명사 추출
txt_noun <- extractNoun(txt_data)
library(Sejong)
# 명사 추출
txt_noun <- extractNoun(txt_data)
install.packages('extractNoun')
install.packages('KoNLP')
install.packages('Sejong')
install.packages('hash')
install.packages('rJava')
install.packages('tau')
install.packages('RSQLite')
install.packages('devtools')
install.packages('stringr')
install.packages('wordcloud')
install.packages('dplyr')
install.packages('extractNoun')
exam_df <- read.csv(file = '../file/student.txt')
exam_df <- read.csv(file = '../file/exam.csv')
exam_df
install.packages('dplyr')
library(dplyr)
df_exam <- read.csv(file = '../file/exam.csv')
df_exam
df_result1 <- df_exam %>% select(math, english, science)
df_result1
df_result1 <- df_exam %>% select(math, english, science)
df_exam <- read.csv(file = '../file/exam.csv')
df_exam
df_result1 <- df_exam %>% select(math, english, science)
library(dplyr)
df_result2
df_result1 <- df_exam %>% select(math, english, science)
df_result1
install.packages('dplyr')
library(dplyr)
library(dplyr)
df_exam <- read.csv(file = '../file/exam.csv')
df_exam
df_result1 <- df_exam %>% select(math, english, science)
df_result1
install.packages('dplyr')
library(dplyr)
df_exam <- read.csv(file = '../file/exam.csv')
df_exam
df_result1 <- df_exam %>% select(math, english, science)
df_result1
df_exam
df_result2 <- df_exam %>% filter(class == 1)
df_result2
df_result2 <- df_exam %>% filter(class == 1) %>% select(math)
df_result2
df_result2 <- df_exam %>% filter(class == 1) %>% select(everything())
df_result2
df_result3 <- df_exam %>%  select(everything()) %>%  filter(english >= 60 & english < 80)
df_result3
df_result3 <- df_exam %>% filter(english >= 60 & english < 80)
df_result3
df_result4 <- df_exam %>% filter(science >= 60 | science <= 80)
df_result4
df_result4 <- df_exam %>% filter(science >= 60 | science < 80)
df_result4
df_result4 <- df_exam %>% filter(science >= 60 & science < 80)
df_result4
df_result5 <- df_exam %>% filter(math >= 60 ) %>% select(class, id ,math)  %>% arrange(desc(math))
df_result5
%>% arrange(desc(math))
df_result5 <- df_exam %>% filter(math >= 60 )
%>% select(class, id ,math)
%>% arrange(desc(math))
df_result5
df_result6 <- df_exam %>%  group_by(class) %>% summarise(mean(math),mean(english),mean(science))
df_result6
df_result6
df_result7 <- df_exam %>% mutate(total = math+english+science)
df_result7
df_result8 <- df_exam %>% mutate(mean = total/3)
df_result8 <- df_result7 %>% mutate(mean = total/3)
df_result8
df_result9 <- df_result8 %>% mutate(grade = ifelse(mean >= 90, 'A',
ifelse(mean >= 80, 'B',
ifelse(mean >= 70, 'C',
ifelse(mean >= 60, 'D', 'F')))))
df_result9
